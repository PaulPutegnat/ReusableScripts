using UnityEngine.Audio;
using UnityEngine;
using System;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using Random = UnityEngine.Random;

public class AudioManager : MonoBehaviour
{
    [SerializeField] Slider _volumeSlider;

    public Sound[] Sounds;

    public static AudioManager Instance;

    private AudioSource _audioSource;

    private AudioClip[] _exempleListAudioClip;

    private int _randomSoundNum;

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
            return;
        }

        DontDestroyOnLoad(gameObject);

        foreach (Sound sound in Sounds)
        {
            sound.Source = gameObject.AddComponent<AudioSource>();
            sound.Source.clip = sound.Clip;

            sound.Source.volume = sound.Volume;
            sound.Source.pitch = sound.Pitch;
            sound.Source.loop = sound.Loop;
        }
    }

    void Start()
    {
        if (!PlayerPrefs.HasKey("volume"))
        {
            PlayerPrefs.SetFloat("volume", 0.75f);
            Load();
        }
        else
        {
            Load();
        }

        SceneManager.sceneLoaded += OnSceneLoaded;

        _audioSource = GetComponent<AudioSource>();
        _exempleListAudioClip = Resources.LoadAll<AudioClip>("SFX_Exemple_List_AudioClip");
    }

    private void OnSceneLoaded(Scene loadedScene, LoadSceneMode arg1)
    {
        if (loadedScene.name == "Main Menu")
        {
            _volumeSlider = FindObjectOfType<Slider>(true);
            _volumeSlider.onValueChanged.AddListener(delegate(float value) { ChangeVolume(); });
            Load();
        }
    }

    public void ChangeVolume()
    {
        if (_volumeSlider != null)
        {
            AudioListener.volume = _volumeSlider.value;
            Save();
        }
    }

    private void Load()
    {
        if (_volumeSlider != null)
        {
            _volumeSlider.value = PlayerPrefs.GetFloat("volume");
        }
    }

    private void Save()
    {
        PlayerPrefs.SetFloat("volume", _volumeSlider.value);
    }

    public void PlaySingleSound(string name)
    {
        Sound s = Array.Find(Sounds, sound => sound.Name == name);
        if (s == null)
        {
            Debug.LogWarning("Le son: " + name + " n'existe pas!");
            return;
        }
        s.Source.Play();

        /*
        Pour jouer un son unique dans d'autres scripts:
        AudioManager.Instance.PlaySingleSound("nom du son");
        */
    }

    public void StopSingleSound(string name)
    {
        Sound s = Array.Find(Sounds, sound => sound.Name == name);
        if (s == null)
        {
            Debug.LogWarning("Sound: " + name + " not found!");
            return;
        }
        s.Source.Stop();

        /*
        Pour stoper un son unique dans d'autres scripts:
        AudioManager.Instance.StopSingleSound("nom du son");
        */
    }

    public void PlayExempleListAudioClip()
    {
        _randomSoundNum = Random.Range(0, 3);
        _audioSource.PlayOneShot(_exempleListAudioClip[_randomSoundNum]);
    }

    /*
    Pour jouer un son al√©atoire parmi une liste dans d'autres scripts:
    AudioManager.Instance.PlayExempleListAudioClip();
    */
}
